* Syntaxes
** function
def <function_name>(<parameters>):
    ....
    return
** if-else
if <condition>:
    ....
else:
    ....

It is helpful to note that Python does not support in line
assigment in the if statement, so you cannot end up accidentally
assigning values when you want to compare!


* Functions
** Begin with a keyword : def
*** The def line is terminated with a colon (:)
** Triple quotes right after the def line indicates a doc string
*** doc strings help provide context sensitive information
** Python functions have attributes that are available at runtime
** A function is an object!
*** It has a built in attribute, __doc__, the doc string


** Indentation is very important!
*** A function does not have an explicit beginning and an end
*** Defined merely by indentation
**** Applies to all code blocks, such as if, while, etc.


* Modules
** Import modules using the import command (can be .py files)
*** Once imported, you can reference any of its public classes, functions, etc
** When you import new modules, python looks in all places in sys.path
*** To view existing paths: sys.path
*** To add a new path: sys.path.append('mynew/path')
**** This effect is not permanent, and lasts only as long as the session
** If you want to use functions in imported module, reference it with a dot
*** eg. module.functionname
** Some built-in attributes
*** __name__ 
If you import the module, then the __name__ is the filename, otherwise
if you run it as a program, it has a special value __main__
*** __doc__
Reads the doc string in the function


* Dictionaries
** Define one-to-one relationships between keys and values
** You can get values by key, but not keys by values
** Dictionaries, by definition, are unordered.
** Dictionary Keys are case sensitive.
** Dictionary values can be of any data type. while keys are of a particular type
*** For keys: strings, integers are allowed
** Commands
*** Defining keys
    d = {"a":"b","c':"d"}
*** Accessing values
    d["a"] ------> b
*** Modifying values
    d["a"]="new"
*** Adding new values
    d["e"]="f"
*** Deleting dictionaries
**** del d["a"] -> Lets you delete individual keys
**** d.clear()  -> Clears an entire dictionar


* Lists
** Very similar to arrays in C++, but have the advantage of handling multiple data types
** List indices start from zero
** Negative indices will start accessing the list from backwards
*** One way to see negative indices is actual_index = length(list)-index
** List manipulation is very similar to MATLAB's syntax
** Commands
*** Initializing a list
**** l = ["a","b","x","y"];
*** Accessing an element
**** li[1], li[-1]
*** Slicing a list
**** li[1:4]. It should be noted that the 1st element will be included, while the 4th element will not.
**** From beginning to index (but not including the index)  : li[:index]
**** From index to end : li[index:]
**** All the elements : li[:]
*** Adding elements to a list
**** append
Adds a single element to the end of the list. Going with the li example, li.append("new").
**** insert
Inserts a single element at a desired position in the list. Eg., li.insert(2,"new").
**** extend
Concatenates the current list and a new list as specified in the argument. Eg. li.extend(["two","elements"])

**** Difference between extend and append
Append adds a _single_ element of _any_ data type to the end of a list, while extend takes _only_ a list as an argument,
and adds each element of the list to the original list. For example,
len(li) = 3
li.append(["a","b","c"]) ----> len(li) = 4
li(4) = ['a','b','c']

and

len(li) = 3
li.extend(["a","b","c"]) ----> len(li) = 6
li(4) = 'a'

*** Finding elements in a list
**** index
index finds the _first_ occurrence of a value in the list and returns the index
Eg. li.index("new")
If the object you are searching for is not in the list, then python raises an exception.
**** in
Used as a test to see if an object is in the list. Eg. "new" in li
This returns a true or a false logical value.

*** Deleting elements in a list
**** remove
This removes only the first occurence of a value in a list.
Eg. li.remove("new")
Note that this does not return a value, unlike pop.
**** pop
Similar to the pop concept in stacks, it removes the last element in the list and returns the value removed.
Eg. li.pop()
*** Additional operations
**** sort()
** Operators
*** +
This concatenates 2 lists (similar to extend) and returns a _new_ list as a value (unlike extend, which just alterns an existing list). This makes extend a faster command to use on larger arrays
*** +=
Similar to +, with the C equivalent. (This is overloaded with lists, strings, integers and user-defined classes).
*** *
Works as a repeater. 
Eg. li = [1,2]*3 ---> [1,2,1,2,1,2]


* Tuples
** A tuple is a list that cannot be changed once created.
** It is defined in the same way as a list, but with parantheses instead of square brackets.
** You cannot find elements in a tuple, but you can check if an element exists using the in command.
** They are _faster_ than lists
** To convert between lists and tuples, we use two built in commands in python
*** tuple
*** list
** Tuples can be used as dictionary keys (since dictionary keys must be immutable.)
*** Note that this condition means that tuples of lists are considered dictionary unsafe

